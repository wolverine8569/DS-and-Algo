    // Finding Majority element (coming more than N/2 times)
    int majorityElement(int a[], int size)
    {
        
        int num=INT_MAX,count=0,freq=0;
        for(int i=0;i<size;i++){
            if(a[i]==num)
            count++;
            else if(count==0)
            {
                num=a[i];
                count++;
            }
            else if(a[i]!=num)
            count--;
        }
        for(int i=0;i<size;i++){
            if(a[i]==num)
            freq++;
        }
        if(freq>size/2)
        return num;
        return -1;
    }
  
  // finding Majority element (coming more than N/3 times)
  int Solution::repeatedNumber(const vector<int> &A) {
    int num1=INT_MAX,count1=0,count2=0,num2=INT_MAX;
    for(int i=0;i<A.size();i++){
        if(A[i]==num1)
        count1++;
        else if(A[i]==num2){
            count2++;
        }
        else if(count1==0)
        {
            num1=A[i];
            count1=1;
        }
        else if(count2==0)
        {
            num2=A[i];
            count2=1;
        }
        else{
            count1--;
            count2--;
        }
    }
    int freq1=0,freq2=0;
    for(int i=0;i<A.size();i++){
        if(A[i]==num1)
        freq1++;
        else if(A[i]==num2)
        freq2++;
    }
    int check=A.size()/3;
    if(freq1>check)
    return num1;
    if(freq2>check)
    return num2;
    return -1;
}
